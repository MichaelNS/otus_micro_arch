play.http.secret.key = "changeme"

# The SessionCache expiration time if not touched
session.expirationTime = 5 minutes

play.filters.disabled+=play.filters.csrf.CSRFFilter

play.filters.hosts {
  # Allow requests to example.com, its subdomains, and localhost:9000.
  allowed = ["localhost:9000"]
}

# Database configuration
# ~~~~~
slick.dbs.default {
  profile = "utils.db.SmPostgresDriver$"

  db {
    profile = "org.postgresql.Driver"
    url = "jdbc:postgresql://localhost:5432/authdb"
    user = "authuser"
    password = "authpasswd"

    # s.u.AsyncExecutor - Having maxConnection > maxThreads can result in deadlocks if transactions or database locks are used.
    numThreads = 20
    maxConnections = 20
  }
}



# Show off distributed cache using akka distributed data
# http://doc.akka.io/docs/akka/current/scala/distributed-data.html
akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "DEBUG"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  actor {
    provider = "cluster"

    # Do enable protobuf serialization
    # http://doc.akka.io/docs/akka/current/scala/remoting.html#Disabling_the_Java_Serializer
    enable-additional-serialization-bindings = on

    # Don't allow insecure java deserialization
    allow-java-serialization = off

    serialization-bindings {
      // Don't allow users to manually invoke java serialization.
      "java.io.Serializable" = none
    }
  }

  remote {
    log-remote-lifecycle-events = off

    artery {
      enabled = on
      canonical.hostname = "127.0.0.1"
      canonical.port = 0
    }
  }

  # Seed nodes are started by ClusterService (you'd typically have several
  # play instances in production with different ip addresses and the same ports,
  # but we fake it here)
  cluster {
    metrics.enabled = off
    jmx.enabled = off

    min-nr-of-members = 2
    seed-nodes = [
      "akka://"${play.akka.actor-system}"@127.0.0.1:2551",
      "akka://"${play.akka.actor-system}"@127.0.0.1:2552"
    ]
  }
}
